#include "../Headers/G422.h"
#include "../Headers/G422_MDL_DVC.h"
#include "../Headers/G422_DVC.h"

// these are defined up front so we can automate their setup
VCSwitchDef G422::vcSwitchDefs[VC_SWITCH_COUNT] =
{
	{ MGID_SW3_GEAR,          VCSwitch::SW3_MID,     _V(-0.100566, 2.24176, 38.9565),     _V(0, 2.23281, 38.9669),          _X  },
	{ MGID_SW3_CANARD,        VCSwitch::SW3_MID,     _V(-0.0795636, 2.24176, 38.9565),    _V(0, 2.23281, 38.9669),          _X  },
	{ MGID_SW3_VISOR,         VCSwitch::SW3_MID,     _V(-0.0607121, 2.24176, 38.9565),    _V(0, 2.23281, 38.9669),          _X  },
	{ MGID_SW3_RCS,           VCSwitch::SW3_MID,     _V(-0.0420616, 2.24176, 38.9565),    _V(0, 2.23281, 38.9669),          _X  },

	{ MGID_SW2_LGT_NAV,       VCSwitch::SW2_DOWN,    _V(-0.133736, 2.80125, 39.0016),     _V(0, 2.80711, 39.0082),          _Xn },
	{ MGID_SW2_LGT_STB,       VCSwitch::SW2_DOWN,    _V(-0.112913, 2.80125, 39.0016),     _V(0, 2.80711, 39.0082),          _Xn },
	{ MGID_SW2_LGT_BCN,       VCSwitch::SW2_DOWN,    _V(-0.0920897, 2.80125, 39.0016),    _V(0, 2.80711, 39.0082),          _Xn },
	{ MGID_SW2_LGT_LND,       VCSwitch::SW2_DOWN,    _V(-0.0504438, 2.80125, 39.0016),    _V(0, 2.80711, 39.0082),          _Xn },
	{ MGID_SW2_LGT_TAX,       VCSwitch::SW2_DOWN,    _V(-0.0310962, 2.80125, 39.0016),    _V(0, 2.80711, 39.0082),          _Xn },
	{ MGID_SW2_LGT_DCK,       VCSwitch::SW2_DOWN,    _V(-0.0106556, 2.80125, 39.0016),    _V(0, 2.80711, 39.0082),          _Xn },

	{ MGID_SW2_MSFEED_L,	  VCSwitch::SW2_DOWN,    _V(-0.190167, 2.3757, 39.0964),      _V(-0.167253, 2.36729, 39.1049),  _X  },
	{ MGID_SW2_MSFEED_R,      VCSwitch::SW2_DOWN,	   _V(-0.148361, 2.3757, 39.0964),      _V(-0.146685, 2.36729, 39.1049),  _X  },
	{ MGID_SW2_SYSFEED_OMS,   VCSwitch::SW2_DOWN,	   _V(-0.188013, 2.34152, 39.0712),     _V(-0.167253, 2.33571, 39.0745),  _X  },
	{ MGID_SW2_SYSFEED_RCS,   VCSwitch::SW2_DOWN,	   _V(-0.168275, 2.34152, 39.0712),     _V(-0.167613, 2.33571, 39.0745),  _X  },
	{ MGID_SW2_SYSFEED_APU,   VCSwitch::SW2_DOWN,	   _V(-0.146898, 2.34152, 39.0712),     _V(-0.146685, 2.33571, 39.0745),  _X  },

	{ MGID_SW3_OXYFEED_L,     VCSwitch::SW2_DOWN,    _V(-0.24636, 2.34541, 39.0663),      _V(-0.224714, 2.33551, 39.0747),  _X  },
	{ MGID_SW3_OXYFEED_R, 	  VCSwitch::SW2_DOWN,    _V(-0.227356, 2.34541, 39.0663),     _V(-0.223978, 2.33551, 39.0747),  _X  },

	{ MGID_SW2_APU_RAMX,      VCSwitch::SW2_DOWN,    _V(0.0377143, 2.18791, 38.6481),     _V(0.0312816, 2.17565, 38.6468),  _X  },
	{ MGID_SW3_APU_PACK_A,    VCSwitch::SW3_MID,     _V(-0.0440604, 2.18185, 38.6091),    _V(-0.0488121, 2.17154, 38.608),  _X  },
	{ MGID_SW3_APU_PACK_B,    VCSwitch::SW3_MID,     _V(-0.0243897, 2.18185, 38.6091),    _V(-0.0290738, 2.17154, 38.608),  _X  },
	{ MGID_SW3_APU_HYD,       VCSwitch::SW3_MID,     _V(0.0143213, 2.16742, 38.5745),     _V(-0.0056787, 2.16742, 38.5745), _X  },

	{ MGID_SW3_EMAINL_IGN,    VCSwitch::SW3_DOWN,    _V(-0.0883789, 2.22507, 38.9223),    _V(-0.0883789, 2.21386, 38.9235), _X  },
	{ MGID_SW3_EMAINR_IGN,    VCSwitch::SW3_DOWN,    _V(-0.0674725, 2.22507, 38.9223),    _V(-0.0883789, 2.21386, 38.9235), _X  },
	{ MGID_SW3_EMAINL_MODE,   VCSwitch::SW3_MID,     _V(-0.0883789, 2.21515, 38.866),     _V(-0.0786392, 2.20551, 38.8738), _X  },
	{ MGID_SW3_EMAINR_MODE,   VCSwitch::SW3_MID,     _V(-0.0674725, 2.21515, 38.866),     _V(-0.0786392, 2.20551, 38.8738), _X  },
	{ MGID_SW3_EMAINL_REHEAT, VCSwitch::SW2_DOWN,    _V(-0.0883789, 2.20629, 38.8118),    _V(-0.0786391, 2.19797, 38.818),  _X  },
	{ MGID_SW3_EMAINR_REHEAT, VCSwitch::SW2_DOWN,    _V(-0.0674725, 2.20629, 38.8118),    _V(-0.0786391, 2.19797, 38.818),  _X  },

	{ MGID_SW3_RAMX_DOOR,     VCSwitch::SW3_MID,     _V(0.00537012, 2.19861, 38.714),     _V(0.0070939, 2.1843, 38.7142),   _X  },
	{ MGID_SW3_RAMX_IGN,	  VCSwitch::SW3_DOWN,    _V(-0.0141052, 2.19861, 38.714),     _V(0.00817643, 2.1843, 38.7142),  _X  },
	{ MGID_SW3_RAMX_MODE,     VCSwitch::SW3_MID,     _V(0.037847, 2.19641, 38.6962),      _V(0.051995, 2.18318, 38.6972),   _X  },

	{ MGID_SW3_STBYIGN_OMS,   VCSwitch::SW2_DOWN,    _V(-0.225541, 2.37498, 39.0972),     _V(-0.224312, 2.36715, 39.1051),  _X  },
	{ MGID_SW3_STBYIGN_RCS,   VCSwitch::SW2_DOWN,    _V(-0.243568, 2.37498, 39.0972),     _V(-0.223946, 2.36715, 39.1051),  _X  },

	{ MGID_SW2_THR_AUTH,      VCSwitch::SW2_UP,      _V(0.147331, 2.35039, 39.0752),      _V(0.161479, 2.34303, 39.08),     _X  },
	{ MGID_SW3_BAY_OPENCLSE,  VCSwitch::SW3_MID,     _V(-0.166489, 2.85702, 38.901),      _V(-0.146489, 2.85702, 38.901),   _Xn },

	{ MGID_SW2_LEFT_DUMP,     VCSwitch::SW2_DOWN,    _V(-0.345545, 2.91967, 38.7197),     _V(-0.325545, 2.91967, 38.7197),  _Xn, 0.5 },
	{ MGID_SW2_FWD_DUMP,      VCSwitch::SW2_DOWN,    _V(-0.326214, 2.91967, 38.7197),     _V(-0.306214, 2.91967, 38.7197),  _Xn, 0.5 },
	{ MGID_SW2_AFT_DUMP,      VCSwitch::SW2_DOWN,    _V(-0.305849, 2.91967, 38.7197),     _V(-0.285849, 2.91967, 38.7197),  _Xn, 0.5 },
	{ MGID_SW2_RIGHT_DUMP,    VCSwitch::SW2_DOWN,    _V(-0.28535, 2.91967, 38.7197),      _V(-0.26535, 2.91967, 38.7197),   _Xn, 0.5 },
	{ MGID_SW2_ASF_DUMP,      VCSwitch::SW2_DOWN,    _V(-0.265586, 2.91967, 38.7197),     _V(-0.245586, 2.91967, 38.7197),  _Xn, 0.5 },
	{ MGID_SW2_OXY_DUMP,      VCSwitch::SW2_DOWN,    _V(-0.245177, 2.91967, 38.7197),     _V(-0.225177, 2.91967, 38.7197),  _Xn, 0.5 },
	{ MGID_SW2_MASTER_DUMP,   VCSwitch::SW2_DOWN,    _V(-0.342558, 2.90107, 38.772),      _V(-0.322558, 2.90107, 38.772),   _Xn, 0.5 },

	{ MGID_SW2_DCKSPL_FUEL,   VCSwitch::SW2_DOWN,    _V(0.120339, 2.83445, 38.9593),      _V(0.100339, 2.83445, 38.9593),   _Xn, 0.5 },
	{ MGID_SW2_DCKSPL_OXY,    VCSwitch::SW2_DOWN,    _V(0.141654, 2.83445, 38.9593),      _V(0.121654, 2.83445, 38.9593),   _Xn, 0.5 },
	{ MGID_SW2_DCKSPL_ASF,    VCSwitch::SW2_DOWN,    _V(0.161634, 2.83445, 38.9593),      _V(0.141634, 2.83445, 38.9593),   _Xn, 0.5 }
};

VCKnobDef G422::vcKnobDefs[VC_KNOB_COUNT] =
{
	{ MGID_KB3_ACS_MODE,  VCKnob::KB3_DOWN, _V(0.199, 2.351, 39.077),        _V(0.0243076, 0.626733, -0.778855),   0.03,  float(-95 * RAD), 0,  0.67 },
	{ MGID_KB3_RCS_MODE,  VCKnob::KB3_DOWN, _V(0.247, 2.351, 39.077),        _V(-0.0243061, 0.626731, -0.778857),  0.03,  float(75 * RAD),  0,  0.45 },
	{ MGID_KB2_COORD_REF, VCKnob::KB2_DOWN, _V(0.166, 2.38, 39.097),         _V(0, 0.739668, -0.672971),           0.03,  float(PI),        0 },

	{ MGID_KB2_LENG_FEED, VCKnob::KB2_DOWN, _V(0.0688978, 2.86922, 38.8607), _V(0.00108671, -0.950117, -0.311893), 0.008, float(PI05),      1 },
	{ MGID_KB2_RAMX_FEED, VCKnob::KB2_DOWN, _V(0.115558, 2.86914, 38.8611),  _V(0.00108671, -0.950117, -0.311893), 0.008, float(PI05),      1 },
	{ MGID_KB2_RENG_FEED, VCKnob::KB2_DOWN, _V(0.162308, 2.86903, 38.8616),  _V(0.00108671, -0.950117, -0.311893), 0.008, float(PI05),      1 },

	{ MGID_KB2_RCS_FEED,  VCKnob::KB2_DOWN, _V(0.0538829, 2.9097, 38.7466),  _V(0.00108671, -0.950117, -0.311893), 0.008, float(PI05),      1 },
	{ MGID_KB2_OMS_FEED,  VCKnob::KB2_DOWN, _V(0.0851828, 2.9097, 38.7467),  _V(0.00108671, -0.950117, -0.311893), 0.008, float(PI05),      1 },
	{ MGID_KB2_APU_FEED,  VCKnob::KB2_DOWN, _V(0.115267, 2.9097, 38.7468),   _V(0.00108671, -0.950117, -0.311893), 0.008, float(PI05),      1 },

	{ MGID_KB2_LOXY_FEED, VCKnob::KB2_DOWN, _V(0.146261, 2.9097, 38.7469),   _V(0.00108671, -0.950117, -0.311893), 0.008, float(PI05),      1 },
	{ MGID_KB2_ROXY_FEED, VCKnob::KB2_DOWN, _V(0.176345, 2.9097, 38.747),    _V(0.00108671, -0.950117, -0.311893), 0.008, float(PI05),      1 }
};

VCButtonDef G422::vcButtonDefs[VC_BUTTON_COUNT] =
{
	{ AP_MASTER_BUTTON,      _V(0.13693, 2.6097, 39.0911),      0.007 },
	{ AP_PROGRADE_BUTTON,    _V(0.0381704, 2.60953, 39.0911),   0.007 },
	{ AP_RETROGRADE_BUTTON,  _V(0.0190268, 2.60992, 39.0911),   0.007 },
	{ AP_NORMAL_BUTTON,      _V(0, 2.60948, 39.0911),           0.007 },
	{ AP_ANTINORMAL_BUTTON,  _V(-0.0191579, 2.60926, 39.0911),  0.007 },
	{ AP_HLEVEL_BUTTON,      _V(-0.0384947, 2.60972, 39.0911),  0.007 },
	{ AP_KILLROT_BUTTON,     _V(0, 2.58205, 39.0915),           0.013 },

	{ HUD_DOCK_BUTTON,       _V(0.217136, 2.85625, 38.8981),    0.01 },
	{ HUD_ORBIT_BUTTON,      _V(0.217117, 2.84982, 38.9161),    0.01 },
	{ HUD_SURF_BUTTON,       _V(0.217832, 2.84341, 38.9342),    0.01 },
	{ HUD_OFF_BUTTON,        _V(0.217748, 2.8368, 38.9528),     0.01 },

	{ HUD_BRT_BUTTON,        _V(0.303273, 2.84796, 38.8627),    0.0075 },
	{ HUD_CLR_BUTTON,        _V(0.338064, 2.85082, 38.8746),    0.005 },
	{ MASTER_WARN_BUTTON,    _V(0.276688, 2.59471, 39.0982),    0.013 }
};

bool G422::clbkLoadVC(int id)
{
	// pilot side
	if (vcPovStation == 0)
	{
		SetMeshVisibilityMode(dvcModelIdR, MESHVIS_VC);
		SetMeshVisibilityMode(dvcModelIdL, MESHVIS_NEVER);

		SetCameraMovement(_V(0, -0.05, 0.1), 0, -20 * RAD, _V(-0.20, -0.1, 0), 15 * RAD, 45 * RAD, _V(0.15, -0.02, 0), -35 * RAD, 0);

		SetCameraOffset(V3_VC_POV_PILOT);

		oapiVCSetAreaClickmode_Spherical((VC_CTRLSET_MOVESEAT << 16), _V(-1, 2.25, 38.7), .6);

		VECTOR3 vDir = _V(0, -0.15, 1); normalise(vDir);
		SetCameraDefaultDirection(vDir);
		oapiCameraSetCockpitDir(0, 0);
	}
	// engineer side
	else
	{
		SetMeshVisibilityMode(dvcModelIdR, MESHVIS_NEVER);
		SetMeshVisibilityMode(dvcModelIdL, MESHVIS_VC);

		//                   LEAN FORWARD (FMC)                     LEAN LEFT (WINDOW)                  LEAN RIGHT (OVERHEAD)
		SetCameraMovement(_V(0.1, -0.15, 0.1), -12 * RAD, -10 * RAD, _V(-0.15, -0.02, 0), 35 * RAD, 0 * RAD, _V(0.22, -0.17, .1), -15 * RAD, 60 * RAD);
		//
		SetCameraOffset(V3_VC_POV_FO);

		VECTOR3 vDir = _V(0, -0.2, 1); normalise(vDir);
		SetCameraDefaultDirection(vDir);
		oapiCameraSetCockpitDir(0, -5 * RAD);

		oapiVCSetAreaClickmode_Spherical((VC_CTRLSET_MOVESEAT << 16), _V(1, 2.25, 38.7), .6);
	}

	SetCameraRotationRange(RAD * 80, RAD * 80, RAD * 80, RAD * 55);

	static VCHUDSPEC huds = { 1, MGID_HUD, V3_HUD, 0.16 };
	oapiVCRegisterHUD(&huds); // HUD parameters

	static VCMFDSPEC mfds_1 = { 1, MGID_MFD_1 };
	static VCMFDSPEC mfds_2 = { 1, MGID_MFD_2 };
	static VCMFDSPEC mfds_3 = { 1, MGID_MFD_3 };
	static VCMFDSPEC mfds_4 = { 1, MGID_MFD_4 };
	oapiVCRegisterMFD(MFD_LEFT, &mfds_1);
	oapiVCRegisterMFD(MFD_RIGHT, &mfds_2);
	oapiVCRegisterMFD(MFD_USER1, &mfds_3);
	oapiVCRegisterMFD(MFD_USER2, &mfds_4);

	static VCMFDSPEC mfds_5 = { 1, MGID_MFD_5 };
	static VCMFDSPEC mfds_6 = { 1, MGID_MFD_6 };
	oapiVCRegisterMFD(MFD_USER3, &mfds_5);
	oapiVCRegisterMFD(MFD_USER4, &mfds_6);

	vcEicasRes = oapiLoadTexture(BMP_EICAS_SRC);

	if (!vcEicasRes) {
		fprintf(stderr, "Load EicasSrc Bitmap FAIL!\n");
		exit(EXIT_FAILURE);
	}

	static const VECTOR3 mfdKeyPositions[72] = 
	{
		_V(0.135131, 2.50137, 39.1634), // VC_MFD1_KEY001
		_V(0.135145, 2.4859, 39.157),   // VC_MFD1_KEY002
		_V(0.13516, 2.47043, 39.1506),  // VC_MFD1_KEY003
		_V(0.135174, 2.45496, 39.1442), // VC_MFD1_KEY004
		_V(0.135189, 2.4395, 39.1377),  // VC_MFD1_KEY005
		_V(0.135203, 2.42403, 39.1313), // VC_MFD1_KEY006
		_V(0.261502, 2.50092, 39.1635), // VC_MFD1_KEY007
		_V(0.261517, 2.48545, 39.1571), // VC_MFD1_KEY008
		_V(0.261531, 2.46998, 39.1507), // VC_MFD1_KEY009
		_V(0.261546, 2.45452, 39.1442), // VC_MFD1_KEY010
		_V(0.26156, 2.43905, 39.1378),  // VC_MFD1_KEY011
		_V(0.261789, 2.42362, 39.1314), // VC_MFD1_KEY012

		_V(0.421107, 2.50137, 39.1634), // VC_MFD2_KEY001
		_V(0.421121, 2.4859, 39.157),   // VC_MFD2_KEY002
		_V(0.421135, 2.47043, 39.1506), // VC_MFD2_KEY003
		_V(0.42115, 2.45496, 39.1442),  // VC_MFD2_KEY004
		_V(0.421164, 2.4395, 39.1377),  // VC_MFD2_KEY005
		_V(0.421179, 2.42403, 39.1313), // VC_MFD2_KEY006
		_V(0.547478, 2.50137, 39.1637), // VC_MFD2_KEY007
		_V(0.547492, 2.4859, 39.1573),  // VC_MFD2_KEY008
		_V(0.547507, 2.47043, 39.1509), // VC_MFD2_KEY009
		_V(0.547521, 2.45496, 39.1444), // VC_MFD2_KEY010
		_V(0.547536, 2.4395, 39.138),   // VC_MFD2_KEY011
		_V(0.54755, 2.42403, 39.1316),  // VC_MFD2_KEY012

		_V(0.280804, 2.50137, 39.1634), // VC_MFD3_KEY001
		_V(0.280819, 2.4859, 39.157),   // VC_MFD3_KEY002
		_V(0.280833, 2.47043, 39.1506), // VC_MFD3_KEY003
		_V(0.280848, 2.45496, 39.1442), // VC_MFD3_KEY004
		_V(0.280862, 2.4395, 39.1377),  // VC_MFD3_KEY005
		_V(0.280877, 2.42403, 39.1313), // VC_MFD3_KEY006
		_V(0.404135, 2.50137, 39.1637), // VC_MFD3_KEY007
		_V(0.404149, 2.4859, 39.1573),  // VC_MFD3_KEY008
		_V(0.404164, 2.47043, 39.1509), // VC_MFD3_KEY009
		_V(0.404178, 2.45496, 39.1444), // VC_MFD3_KEY010
		_V(0.404193, 2.4395, 39.138),   // VC_MFD3_KEY011
		_V(0.404207, 2.42403, 39.1316), // VC_MFD3_KEY012

		_V(0.282001, 2.37975, 39.0916), // VC_MFD4_KEY001
		_V(0.282001, 2.36851, 39.0803), // VC_MFD4_KEY002
		_V(0.282001, 2.35776, 39.0672), // VC_MFD4_KEY003
		_V(0.282001, 2.34665, 39.0541), // VC_MFD4_KEY004
		_V(0.282001, 2.33596, 39.0412), // VC_MFD4_KEY005
		_V(0.282001, 2.32634, 39.0301), // VC_MFD4_KEY006
		_V(0.404227, 2.37954, 39.0914), // VC_MFD4_KEY007
		_V(0.404227, 2.3688, 39.0782),  // VC_MFD4_KEY008
		_V(0.404227, 2.35768, 39.0651), // VC_MFD4_KEY009
		_V(0.404227, 2.347, 39.0523),   // VC_MFD4_KEY010
		_V(0.404227, 2.33738, 39.0412), // VC_MFD4_KEY011
		_V(0.404227, 2.32583, 39.029),  // VC_MFD4_KEY012

		_V(-0.481395, 2.50291, 39.1634), /* VC_MFD5_KEY001 */
		_V(-0.481395, 2.48707, 39.156),  /* VC_MFD5_KEY002 */
		_V(-0.481395, 2.47236, 39.1504), /* VC_MFD5_KEY003 */
		_V(-0.481395, 2.45652, 39.1448), /* VC_MFD5_KEY004 */
		_V(-0.481395, 2.44035, 39.1384), /* VC_MFD5_KEY005 */
		_V(-0.481395, 2.42521, 39.1304), /* VC_MFD5_KEY006 */
		_V(-0.354229, 2.50283, 39.1648), /* VC_MFD5_KEY007 */
		_V(-0.354229, 2.48813, 39.1592), /* VC_MFD5_KEY008 */
		_V(-0.354229, 2.47229, 39.1536), /* VC_MFD5_KEY009 */
		_V(-0.354229, 2.45612, 39.1472), /* VC_MFD5_KEY010 */
		_V(-0.354229, 2.44098, 39.1391), /* VC_MFD5_KEY011 */
		_V(-0.354229, 2.42543, 39.1337), /* VC_MFD5_KEY012 */

		_V(-0.333415, 2.50291, 39.1634), /* VC_MFD6_KEY001 */
		_V(-0.333415, 2.4881, 39.1569),  /* VC_MFD6_KEY002 */
		_V(-0.333415, 2.4735, 39.1505),  /* VC_MFD6_KEY003 */
		_V(-0.333415, 2.45717, 39.1435), /* VC_MFD6_KEY004 */
		_V(-0.333415, 2.44076, 39.1368), /* VC_MFD6_KEY005 */
		_V(-0.333415, 2.42569, 39.1323), /* VC_MFD6_KEY006 */
		_V(-0.206249, 2.5023, 39.1657),  /* VC_MFD6_KEY007 */
		_V(-0.206249, 2.48712, 39.1592), /* VC_MFD6_KEY008 */
		_V(-0.206249, 2.47104, 39.1523), /* VC_MFD6_KEY009 */
		_V(-0.206249, 2.45517, 39.1455), /* VC_MFD6_KEY010 */
		_V(-0.206249, 2.44066, 39.141),  /* VC_MFD6_KEY011 */
		_V(-0.206249, 2.42543, 39.1337), /* VC_MFD6_KEY012 */
	};

	for (int index = 0; index < 72; ++index)
	{
		oapiVCRegisterArea((VC_CTRLSET_MFDK << 16) | (index & 0xFFFF), _R(0, 0, 0, 0), PANEL_REDRAW_NEVER, PANEL_MOUSE_LBDOWN | PANEL_MOUSE_LBPRESSED | PANEL_MOUSE_LBUP, PANEL_MAP_NONE, NULL);
		oapiVCSetAreaClickmode_Spherical((VC_CTRLSET_MFDK << 16) | (index & 0xFFFF), mfdKeyPositions[index], .02);
	}

	static const VECTOR3 mfdCtrlPositions[18] =
	{
		_V(0.159698, 2.40178, 39.1252), // VC_MFD1_SEL
		_V(0.197101, 2.40178, 39.1252), // VC_MFD1_PWR
		_V(0.234524, 2.40178, 39.1252), // VC_MFD1_MNU

		_V(0.450944, 2.40178, 39.1252), // VC_MFD2_SEL
		_V(0.488347, 2.40178, 39.1252), // VC_MFD2_PWR
		_V(0.52577, 2.40178, 39.1252),  // VC_MFD2_MNU

		_V(0.305624, 2.40178, 39.1252), // VC_MFD3_SEL
		_V(0.343027, 2.40178, 39.1252), // VC_MFD3_PWR
		_V(0.38045, 2.40178, 39.1252),  // VC_MFD3_MNU

		_V(0.305624, 2.30991, 39.0084), // VC_MFD4_SEL
		_V(0.343027, 2.30991, 39.0084), // VC_MFD4_PWR
		_V(0.3761, 2.30991, 39.0084),   // VC_MFD4_MNU

		_V(-0.454807, 2.40178, 39.1252), /* VC_MFD5_SEL */
		_V(-0.417757, 2.40178, 39.1252), /* VC_MFD5_PWR */
		_V(-0.380753, 2.40178, 39.1252), /* VC_MFD5_MNU */

		_V(-0.308079, 2.40178, 39.1252), /* VC_MFD6_SEL */
		_V(-0.271129, 2.40178, 39.1252), /* VC_MFD6_PWR */
		_V(-0.233325, 2.40178, 39.1252), /* VC_MFD6_MNU */
	};

	for (int index = 0; index < 18; ++index)
	{
		oapiVCRegisterArea((VC_CTRLSET_MFDC << 16) | (index & 0xFFFF), _R(0, 0, 0, 0), PANEL_REDRAW_NEVER, PANEL_MOUSE_LBDOWN, PANEL_MAP_NONE, NULL);
		oapiVCSetAreaClickmode_Spherical((VC_CTRLSET_MFDC << 16) | (index & 0xFFFF), mfdCtrlPositions[index], .02);
	}

	vcMfdTex = oapiGetTextureHandle(dvcModel, TEX_MFDKEYS);
	oapiVCRegisterArea(VC_AREA_MFDKEYS, _R(0, 0, 512, 512), PANEL_REDRAW_USER, PANEL_MOUSE_IGNORE, PANEL_MAP_BACKGROUND, vcMfdTex);
	oapiVCRegisterArea(VC_AREA_CGPOS, _R(400, 0, 499, 400), PANEL_REDRAW_ALWAYS, PANEL_MOUSE_IGNORE, PANEL_MAP_BACKGROUND, vcMfdTex);

	vcEicasTex = oapiGetTextureHandle(dvcModel, TEX_EICAS);
	oapiVCRegisterArea(VC_AREA_EICAS_ALL, _R(0, 0, 1024, 1024), PANEL_REDRAW_ALWAYS, PANEL_MOUSE_IGNORE, PANEL_MAP_BACKGROUND, vcEicasTex);

	// alright, let's rock - commence primary VC switch buildup (we've lots of those)
	for (int index = 0; index < VC_SWITCH_COUNT; ++index)
	{
		oapiVCRegisterArea((VC_CTRLSET_SWITCHES << 16) | (index & 0xFFFF), _R(0, 0, 0, 0),
			PANEL_REDRAW_NEVER, PANEL_MOUSE_LBDOWN | PANEL_MOUSE_RBDOWN | PANEL_MOUSE_LBUP | PANEL_MOUSE_RBUP, PANEL_MAP_NONE, NULL);

		oapiVCSetAreaClickmode_Spherical((VC_CTRLSET_SWITCHES << 16) | (index & 0xFFFF), vcSwitchDefs[index].refPos, .02);
	}

	// VC knob buildup
	for (int index = 0; index < VC_KNOB_COUNT; ++index)
	{
		oapiVCRegisterArea((VC_CTRLSET_KNOBS << 16) | (index & 0xFFFF), _R(0, 0, 0, 0),	PANEL_REDRAW_NEVER,
			PANEL_MOUSE_LBDOWN | PANEL_MOUSE_RBDOWN, PANEL_MAP_NONE, NULL);

		oapiVCSetAreaClickmode_Spherical((VC_CTRLSET_KNOBS << 16) | (index & 0xFFFF), vcKnobDefs[index].refPos, vcKnobDefs[index].size);
	}

	// VC button buildup
	for (int index = 0; index < VC_BUTTON_COUNT; ++index)
	{
		oapiVCRegisterArea((VC_CTRLSET_BUTTONS << 16) | (index & 0xFFFF), _R(0, 0, 0, 0), PANEL_REDRAW_NEVER, PANEL_MOUSE_LBDOWN | PANEL_MOUSE_RBDOWN, PANEL_MAP_NONE, NULL);

		oapiVCSetAreaClickmode_Spherical((VC_CTRLSET_BUTTONS << 16) | (index & 0xFFFF), vcButtonDefs[index].refPos, vcButtonDefs[index].size);
	}

	// we're not out of the woods yet... there's more stuff in there than just the switches....

	// clicking around the pilot or engineer's head acts same as the TAB key
	oapiVCRegisterArea((VC_CTRLSET_MOVESEAT << 16), _R(0, 0, 0, 0), PANEL_REDRAW_NEVER, PANEL_MOUSE_LBDOWN, PANEL_MAP_NONE, NULL);
	oapiVCSetAreaClickmode_Spherical((VC_CTRLSET_MOVESEAT << 16), _V(-1, 2.25, 38.7), .6);

	// wing position lever
	oapiVCRegisterArea((VC_CTRLSET_WPOSLVR << 16), _R(0, 0, 0, 0), PANEL_REDRAW_NEVER, PANEL_MOUSE_LBDOWN | PANEL_MOUSE_RBDOWN, PANEL_MAP_NONE, NULL);
	oapiVCSetAreaClickmode_Spherical((VC_CTRLSET_WPOSLVR << 16), V3_VC_WPOS_MID, .035);

	// ramcaster thrust lever
	oapiVCRegisterArea((VC_CTRLSET_RAMXLVR << 16), _R(0, 0, 0, 0), PANEL_REDRAW_NEVER, PANEL_MOUSE_LBDOWN | PANEL_MOUSE_RBDOWN, PANEL_MAP_NONE, NULL);
	oapiVCSetAreaClickmode_Spherical((VC_CTRLSET_RAMXLVR << 16), V3_VC_RAMX_ENG, .035);

	// Burner engage knob
	oapiVCRegisterArea((VC_CTRLSET_BURNENG << 16), _R(0, 0, 0, 0), PANEL_REDRAW_NEVER, PANEL_MOUSE_LBDOWN | PANEL_MOUSE_RBDOWN, PANEL_MAP_NONE, NULL);

	oapiVCSetAreaClickmode_Spherical((VC_CTRLSET_BURNENG << 16), V3_VC_BURNENG, 0.015);

	// parking brake handle
	oapiVCRegisterArea((VC_CTRLSET_PRK_BRK_HNDL << 16), _R(0, 0, 0, 0), PANEL_REDRAW_NEVER, PANEL_MOUSE_LBDOWN | PANEL_MOUSE_RBDOWN, PANEL_MAP_NONE, NULL);
	oapiVCSetAreaClickmode_Spherical((VC_CTRLSET_PRK_BRK_HNDL << 16), V3_VC_PRK_BRK_HNDL, .02);

	// gear emergency release handle
	oapiVCRegisterArea((VC_CTRLSET_GEAR_EMER_HNDL << 16), _R(0, 0, 0, 0), PANEL_REDRAW_NEVER, PANEL_MOUSE_LBDOWN, PANEL_MAP_NONE, NULL);
	oapiVCSetAreaClickmode_Spherical((VC_CTRLSET_GEAR_EMER_HNDL << 16), V3_VC_GEAR_EMER_HNDL, .03);

	// undocking handle
	oapiVCRegisterArea((VC_CTRLSET_UNDOCK_HNDL << 16), _R(0, 0, 0, 0), PANEL_REDRAW_NEVER, PANEL_MOUSE_LBDOWN | PANEL_MOUSE_LBUP, PANEL_MAP_NONE, NULL);
	oapiVCSetAreaClickmode_Spherical((VC_CTRLSET_UNDOCK_HNDL << 16), V3_VC_UNDOCK_HNDL, .03);

	// eicas mode select keys
	oapiVCRegisterArea((VC_CTRLSET_EICAS_C1 << 16), _R(0, 0, 0, 0), PANEL_REDRAW_NEVER, PANEL_MOUSE_LBDOWN, PANEL_MAP_NONE, NULL);
	oapiVCSetAreaClickmode_Quadrilateral((VC_CTRLSET_EICAS_C1 << 16), V3_VC_EICAS_SELECT_C1_A, V3_VC_EICAS_SELECT_C1_B, V3_VC_EICAS_SELECT_C1_C, V3_VC_EICAS_SELECT_C1_D);

	oapiVCRegisterArea((VC_CTRLSET_EICAS_C2 << 16), _R(0, 0, 0, 0), PANEL_REDRAW_NEVER, PANEL_MOUSE_LBDOWN, PANEL_MAP_NONE, NULL);
	oapiVCSetAreaClickmode_Quadrilateral((VC_CTRLSET_EICAS_C2 << 16), V3_VC_EICAS_SELECT_C2_A, V3_VC_EICAS_SELECT_C2_B, V3_VC_EICAS_SELECT_C2_C, V3_VC_EICAS_SELECT_C2_D);

	oapiVCRegisterArea((VC_CTRLSET_EICAS_P1L << 16), _R(0, 0, 0, 0), PANEL_REDRAW_NEVER, PANEL_MOUSE_LBDOWN, PANEL_MAP_NONE, NULL);
	oapiVCSetAreaClickmode_Quadrilateral((VC_CTRLSET_EICAS_P1L << 16), V3_VC_EICAS_SELECT_P1L_A, V3_VC_EICAS_SELECT_P1L_B, V3_VC_EICAS_SELECT_P1L_C, V3_VC_EICAS_SELECT_P1L_D);
	oapiVCRegisterArea((VC_CTRLSET_EICAS_P1R << 16), _R(0, 0, 0, 0), PANEL_REDRAW_NEVER, PANEL_MOUSE_LBDOWN, PANEL_MAP_NONE, NULL);
	oapiVCSetAreaClickmode_Quadrilateral((VC_CTRLSET_EICAS_P1R << 16), V3_VC_EICAS_SELECT_P1R_A, V3_VC_EICAS_SELECT_P1R_B, V3_VC_EICAS_SELECT_P1R_C, V3_VC_EICAS_SELECT_P1R_D);

	oapiVCRegisterArea((VC_CTRLSET_EICAS_P2L << 16), _R(0, 0, 0, 0), PANEL_REDRAW_NEVER, PANEL_MOUSE_LBDOWN, PANEL_MAP_NONE, NULL);
	oapiVCSetAreaClickmode_Quadrilateral((VC_CTRLSET_EICAS_P2L << 16), V3_VC_EICAS_SELECT_P2L_A, V3_VC_EICAS_SELECT_P2L_B, V3_VC_EICAS_SELECT_P2L_C, V3_VC_EICAS_SELECT_P2L_D);
	oapiVCRegisterArea((VC_CTRLSET_EICAS_P2R << 16), _R(0, 0, 0, 0), PANEL_REDRAW_NEVER, PANEL_MOUSE_LBDOWN, PANEL_MAP_NONE, NULL);
	oapiVCSetAreaClickmode_Quadrilateral((VC_CTRLSET_EICAS_P2R << 16), V3_VC_EICAS_SELECT_P2R_A, V3_VC_EICAS_SELECT_P2R_B, V3_VC_EICAS_SELECT_P2R_C, V3_VC_EICAS_SELECT_P2R_D);

	oapiVCRegisterArea((VC_CTRLSET_EICAS_E1L << 16), _R(0, 0, 0, 0), PANEL_REDRAW_NEVER, PANEL_MOUSE_LBDOWN, PANEL_MAP_NONE, NULL);
	oapiVCSetAreaClickmode_Quadrilateral((VC_CTRLSET_EICAS_E1L << 16), V3_VC_EICAS_SELECT_E1L_A, V3_VC_EICAS_SELECT_E1L_B, V3_VC_EICAS_SELECT_E1L_C, V3_VC_EICAS_SELECT_E1L_D);
	oapiVCRegisterArea((VC_CTRLSET_EICAS_E1R << 16), _R(0, 0, 0, 0), PANEL_REDRAW_NEVER, PANEL_MOUSE_LBDOWN, PANEL_MAP_NONE, NULL);
	oapiVCSetAreaClickmode_Quadrilateral((VC_CTRLSET_EICAS_E1R << 16), V3_VC_EICAS_SELECT_E1R_A, V3_VC_EICAS_SELECT_E1R_B, V3_VC_EICAS_SELECT_E1R_C, V3_VC_EICAS_SELECT_E1R_D);

	oapiVCRegisterArea((VC_CTRLSET_EICAS_E2L << 16), _R(0, 0, 0, 0), PANEL_REDRAW_NEVER, PANEL_MOUSE_LBDOWN, PANEL_MAP_NONE, NULL);
	oapiVCSetAreaClickmode_Quadrilateral((VC_CTRLSET_EICAS_E2L << 16), V3_VC_EICAS_SELECT_E2L_A, V3_VC_EICAS_SELECT_E2L_B, V3_VC_EICAS_SELECT_E2L_C, V3_VC_EICAS_SELECT_E2L_D);
	oapiVCRegisterArea((VC_CTRLSET_EICAS_E2R << 16), _R(0, 0, 0, 0), PANEL_REDRAW_NEVER, PANEL_MOUSE_LBDOWN, PANEL_MAP_NONE, NULL);
	oapiVCSetAreaClickmode_Quadrilateral((VC_CTRLSET_EICAS_E2R << 16), V3_VC_EICAS_SELECT_E2R_A, V3_VC_EICAS_SELECT_E2R_B, V3_VC_EICAS_SELECT_E2R_C, V3_VC_EICAS_SELECT_E2R_D);

	// eicas power/brt knobs
	oapiVCRegisterArea((VC_CTRLSET_EICAS_PWR << 16), _R(0, 0, 0, 0), PANEL_REDRAW_NEVER, PANEL_MOUSE_LBDOWN | PANEL_MOUSE_RBDOWN, PANEL_MAP_NONE, NULL);
	oapiVCSetAreaClickmode_Spherical((VC_CTRLSET_EICAS_PWR << 16), V3_VC_EICAS_BTRPWR_C1, .018);
	oapiVCRegisterArea((VC_CTRLSET_EICAS_PWR << 16) | 1, _R(0, 0, 0, 0), PANEL_REDRAW_NEVER, PANEL_MOUSE_LBDOWN | PANEL_MOUSE_RBDOWN, PANEL_MAP_NONE, NULL);
	oapiVCSetAreaClickmode_Spherical((VC_CTRLSET_EICAS_PWR << 16) | 1, V3_VC_EICAS_BTRPWR_C2, .018);

	oapiVCRegisterArea((VC_CTRLSET_EICAS_PWR << 16) | 2, _R(0, 0, 0, 0), PANEL_REDRAW_NEVER, PANEL_MOUSE_LBDOWN | PANEL_MOUSE_RBDOWN, PANEL_MAP_NONE, NULL);
	oapiVCSetAreaClickmode_Spherical((VC_CTRLSET_EICAS_PWR << 16) | 2, V3_VC_EICAS_BTRPWR_P1, .018);
	oapiVCRegisterArea((VC_CTRLSET_EICAS_PWR << 16) | 3, _R(0, 0, 0, 0), PANEL_REDRAW_NEVER, PANEL_MOUSE_LBDOWN | PANEL_MOUSE_RBDOWN, PANEL_MAP_NONE, NULL);
	oapiVCSetAreaClickmode_Spherical((VC_CTRLSET_EICAS_PWR << 16) | 3, V3_VC_EICAS_BTRPWR_P2, .018);

	oapiVCRegisterArea((VC_CTRLSET_EICAS_PWR << 16) | 4, _R(0, 0, 0, 0), PANEL_REDRAW_NEVER, PANEL_MOUSE_LBDOWN | PANEL_MOUSE_RBDOWN, PANEL_MAP_NONE, NULL);
	oapiVCSetAreaClickmode_Spherical((VC_CTRLSET_EICAS_PWR << 16) | 4, V3_VC_EICAS_BTRPWR_E1, .018);
	oapiVCRegisterArea((VC_CTRLSET_EICAS_PWR << 16) | 5, _R(0, 0, 0, 0), PANEL_REDRAW_NEVER, PANEL_MOUSE_LBDOWN | PANEL_MOUSE_RBDOWN, PANEL_MAP_NONE, NULL);
	oapiVCSetAreaClickmode_Spherical((VC_CTRLSET_EICAS_PWR << 16) | 5, V3_VC_EICAS_BTRPWR_E2, .018);

	return true;
}